
// Generated by Cadence Genus(TM) Synthesis Solution 16.21-s018_1
// Generated on: Oct  4 2019 00:39:24 IST (Oct  3 2019 19:09:24 UTC)

// Verification Directory fv/wallace 

module half_adder(sum, carry, a, b);
  input a, b;
  output sum, carry;
  wire a, b;
  wire sum, carry;
  ADDHXL g17(.A (a), .B (b), .CO (carry), .S (sum));
endmodule

module full_adder(sum, c_out, x, y, c_in);
  input x, y, c_in;
  output sum, c_out;
  wire x, y, c_in;
  wire sum, c_out;
  ADDFX1 g2(.A (c_in), .B (x), .CI (y), .CO (c_out), .S (sum));
endmodule

module full_adder_1(sum, c_out, x, y, c_in);
  input x, y, c_in;
  output sum, c_out;
  wire x, y, c_in;
  wire sum, c_out;
  ADDFX1 g2(.A (c_in), .B (x), .CI (y), .CO (c_out), .S (sum));
endmodule

module half_adder_1(sum, carry, a, b);
  input a, b;
  output sum, carry;
  wire a, b;
  wire sum, carry;
  ADDHXL g17(.A (a), .B (b), .CO (carry), .S (sum));
endmodule

module half_adder_2(sum, carry, a, b);
  input a, b;
  output sum, carry;
  wire a, b;
  wire sum, carry;
  ADDHXL g17(.A (b), .B (a), .CO (carry), .S (sum));
endmodule

module full_adder_2(sum, c_out, x, y, c_in);
  input x, y, c_in;
  output sum, c_out;
  wire x, y, c_in;
  wire sum, c_out;
  ADDFX1 g2(.A (c_in), .B (y), .CI (x), .CO (c_out), .S (sum));
endmodule

module full_adder_3(sum, c_out, x, y, c_in);
  input x, y, c_in;
  output sum, c_out;
  wire x, y, c_in;
  wire sum, c_out;
  ADDFX1 g2(.A (c_in), .B (x), .CI (y), .CO (c_out), .S (sum));
endmodule

module full_adder_4(sum, c_out, x, y, c_in);
  input x, y, c_in;
  output sum, c_out;
  wire x, y, c_in;
  wire sum, c_out;
  ADDFX1 g2(.A (c_in), .B (x), .CI (y), .CO (c_out), .S (sum));
endmodule

module half_adder_3(sum, carry, a, b);
  input a, b;
  output sum, carry;
  wire a, b;
  wire sum, carry;
  ADDHXL g17(.A (b), .B (a), .CO (carry), .S (sum));
endmodule

module full_adder_5(sum, c_out, x, y, c_in);
  input x, y, c_in;
  output sum, c_out;
  wire x, y, c_in;
  wire sum, c_out;
  ADDFX1 g2(.A (c_in), .B (x), .CI (y), .CO (c_out), .S (sum));
endmodule

module full_adder_6(sum, c_out, x, y, c_in);
  input x, y, c_in;
  output sum, c_out;
  wire x, y, c_in;
  wire sum, c_out;
  ADDFX1 g2(.A (x), .B (y), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module full_adder_7(sum, c_out, x, y, c_in);
  input x, y, c_in;
  output sum, c_out;
  wire x, y, c_in;
  wire sum, c_out;
  ADDFX1 g2(.A (x), .B (y), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module wallace(prod, a, b);
  input [3:0] a, b;
  output [7:0] prod;
  wire [3:0] a, b;
  wire [7:0] prod;
  wire c2, c3, c4, c5, c7, c8, c9, c10;
  wire c11, c12, c13, lay1, lay2, lay3, lay4, lay_1;
  wire lay_2, lay_3, lay_4, lay_5, lay_6, lay_7, lay_8, lay_9;
  wire s3, s4, s5, s6, s8, s9, s10, s11;
  half_adder A(prod[1], c2, lay1, lay2);
  full_adder B(s3, c3, lay_1, lay_2, lay3);
  full_adder_1 C(s4, c4, lay_3, lay_4, lay_5);
  half_adder_1 D(s5, c5, lay_6, lay_7);
  half_adder_2 E(prod[2], c7, s3, c2);
  full_adder_2 F(s8, c8, s4, c3, lay4);
  full_adder_3 G(s9, c9, s5, c4, lay_8);
  full_adder_4 H(s10, c10, s6, c5, lay_9);
  half_adder_3 I(prod[3], c11, s8, c7);
  full_adder_5 J(prod[4], c12, s9, c8, c11);
  full_adder_6 K(prod[5], c13, s10, c9, c12);
  full_adder_7 L(prod[6], prod[7], s11, c10, c13);
  AND2X1 g113(.A (b[1]), .B (a[2]), .Y (lay_4));
  AND2X1 g114(.A (b[1]), .B (a[0]), .Y (lay2));
  AND2X1 g115(.A (b[3]), .B (a[0]), .Y (lay4));
  AND2X1 g116(.A (b[2]), .B (a[3]), .Y (s6));
  AND2XL g117(.A (b[0]), .B (a[0]), .Y (prod[0]));
  AND2X1 g118(.A (b[2]), .B (a[2]), .Y (lay_7));
  AND2X1 g119(.A (b[3]), .B (a[2]), .Y (lay_9));
  AND2X1 g120(.A (b[0]), .B (a[1]), .Y (lay1));
  AND2X1 g121(.A (b[1]), .B (a[1]), .Y (lay_2));
  AND2X1 g122(.A (b[1]), .B (a[3]), .Y (lay_6));
  AND2X1 g123(.A (b[2]), .B (a[0]), .Y (lay3));
  AND2X1 g124(.A (b[0]), .B (a[2]), .Y (lay_1));
  AND2X1 g125(.A (b[0]), .B (a[3]), .Y (lay_3));
  AND2X1 g126(.A (b[3]), .B (a[3]), .Y (s11));
  AND2X1 g127(.A (b[2]), .B (a[1]), .Y (lay_5));
  AND2X1 g128(.A (b[3]), .B (a[1]), .Y (lay_8));
endmodule

