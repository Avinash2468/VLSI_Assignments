
// Generated by Cadence Genus(TM) Synthesis Solution 16.21-s018_1
// Generated on: Sep 26 2019 19:38:30 IST (Sep 26 2019 14:08:30 UTC)

// Verification Directory fv/sixteen_CRA 

module FA(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (c_in), .B (y), .CI (x), .CO (c_out), .S (sum));
endmodule

module FA_1(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_2(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_3(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module CRA(c_out, sum, x, y, c_in);
  input [3:0] x, y;
  input c_in;
  output c_out;
  output [3:0] sum;
  wire [3:0] x, y;
  wire c_in;
  wire c_out;
  wire [3:0] sum;
  wire w_1, w_2, w_3;
  FA A(w_1, sum[0], x[0], y[0], c_in);
  FA_1 B(w_2, sum[1], x[1], y[1], w_1);
  FA_2 C(w_3, sum[2], x[2], y[2], w_2);
  FA_3 D(c_out, sum[3], x[3], y[3], w_3);
endmodule

module FA_4(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_5(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_6(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_7(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module CRA_1(c_out, sum, x, y, c_in);
  input [3:0] x, y;
  input c_in;
  output c_out;
  output [3:0] sum;
  wire [3:0] x, y;
  wire c_in;
  wire c_out;
  wire [3:0] sum;
  wire w_1, w_2, w_3;
  FA_4 A(.c_out (w_1), .sum (sum[0]), .x (x[0]), .y (y[0]), .c_in
       (c_in));
  FA_5 B(.c_out (w_2), .sum (sum[1]), .x (x[1]), .y (y[1]), .c_in
       (w_1));
  FA_6 C(.c_out (w_3), .sum (sum[2]), .x (x[2]), .y (y[2]), .c_in
       (w_2));
  FA_7 D(.c_out (c_out), .sum (sum[3]), .x (x[3]), .y (y[3]), .c_in
       (w_3));
endmodule

module FA_8(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_9(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_10(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_11(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module CRA_2(c_out, sum, x, y, c_in);
  input [3:0] x, y;
  input c_in;
  output c_out;
  output [3:0] sum;
  wire [3:0] x, y;
  wire c_in;
  wire c_out;
  wire [3:0] sum;
  wire w_1, w_2, w_3;
  FA_8 A(.c_out (w_1), .sum (sum[0]), .x (x[0]), .y (y[0]), .c_in
       (c_in));
  FA_9 B(.c_out (w_2), .sum (sum[1]), .x (x[1]), .y (y[1]), .c_in
       (w_1));
  FA_10 C(.c_out (w_3), .sum (sum[2]), .x (x[2]), .y (y[2]), .c_in
       (w_2));
  FA_11 D(.c_out (c_out), .sum (sum[3]), .x (x[3]), .y (y[3]), .c_in
       (w_3));
endmodule

module FA_12(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_13(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_14(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module FA_15(c_out, sum, x, y, c_in);
  input x, y, c_in;
  output c_out, sum;
  wire x, y, c_in;
  wire c_out, sum;
  ADDFX1 g2(.A (y), .B (x), .CI (c_in), .CO (c_out), .S (sum));
endmodule

module CRA_3(c_out, sum, x, y, c_in);
  input [3:0] x, y;
  input c_in;
  output c_out;
  output [3:0] sum;
  wire [3:0] x, y;
  wire c_in;
  wire c_out;
  wire [3:0] sum;
  wire w_1, w_2, w_3;
  FA_12 A(.c_out (w_1), .sum (sum[0]), .x (x[0]), .y (y[0]), .c_in
       (c_in));
  FA_13 B(.c_out (w_2), .sum (sum[1]), .x (x[1]), .y (y[1]), .c_in
       (w_1));
  FA_14 C(.c_out (w_3), .sum (sum[2]), .x (x[2]), .y (y[2]), .c_in
       (w_2));
  FA_15 D(.c_out (c_out), .sum (sum[3]), .x (x[3]), .y (y[3]), .c_in
       (w_3));
endmodule

module sixteen_CRA(c_out, sum, x, y, c_in);
  input [15:0] x, y;
  input c_in;
  output c_out;
  output [15:0] sum;
  wire [15:0] x, y;
  wire c_in;
  wire c_out;
  wire [15:0] sum;
  wire w1, w2, w3;
  CRA A(w1, sum[3:0], x[3:0], y[3:0], c_in);
  CRA_1 B(w2, sum[7:4], x[7:4], y[7:4], w1);
  CRA_2 C(w3, sum[11:8], x[11:8], y[11:8], w2);
  CRA_3 D(c_out, sum[15:12], x[15:12], y[15:12], w3);
endmodule

